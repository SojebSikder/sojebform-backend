generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// main tenant (important table), if this table deleted, 
// then everything will be deleted linked to this table
model Organization {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name         String?
  phone_number String?
  website      String?

  // trial information
  trial_end_at DateTime?

  subscriptions   Subscription[]
  users           User[]
  roles           Role[]
  forms           Form[]
  workspaces      Workspace[]
  workspace_users WorkspaceUser[]
  workspace_forms WorkspaceForm[]

  @@map("organizations")
}

// workspace
model Workspace {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // workspace name
  name     String
  timezone String?

  tenant_id String?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  workspace_users WorkspaceUser[]

  roles           Role[]
  forms           Form[]
  // FormTemplate FormTemplate[]
  workspace_forms WorkspaceForm[]

  @@map("workspaces")
}

// workspace and user relationship
// store workspace team member
model WorkspaceUser {
  // id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  workspace_id String
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  user_id String
  user    User?  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  tenant_id String
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@id([workspace_id, user_id])
  @@map("workspace_users")
}

// workspace form
model WorkspaceForm {
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  workspace_id String
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  form_id String
  form    Form?  @relation(fields: [form_id], references: [id], onDelete: Cascade)

  tenant_id String
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@id([workspace_id, form_id])
  @@map("workspace_forms")
}

model Account {
  id                  String    @id @default(cuid())
  user_id             String
  type                String?
  provider            String?
  provider_account_id String?
  refresh_token       String?
  access_token        String?
  expires_at          DateTime?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
}

model User {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  approved_at  DateTime?
  availability String?

  email      String? @unique
  username   String? @unique
  name       String? @db.VarChar(255)
  first_name String? @db.VarChar(255)
  last_name  String? @db.VarChar(255)
  password   String? @db.VarChar(255)
  domain     String? @unique
  avatar     String?

  phone_number     String?
  country          String?
  state            String?
  local_government String?
  city             String?
  address          String?
  zip_code         String?
  gender           String?
  date_of_birth    DateTime? @db.Date

  // billing id. e.g. stripe customer id
  billing_id String?

  tenant_id String?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  type              String?   @default("user")
  email_verified_at DateTime?

  is_two_factor_enabled Int?    @default(0)
  two_factor_secret     String? // secret key for two factor authentication

  accounts                  Account[]
  creator_conversations     Conversation[] @relation("creator")
  participant_conversations Conversation[] @relation("participant")
  receiver_messages         Message[]      @relation("receiver")
  sender_messages           Message[]      @relation("sender")
  receiver_notifications    Notification[] @relation("receiver")
  sender_notifications      Notification[] @relation("sender")

  user_payment_methods UserPaymentMethod[]
  user_settings        UserSetting[]
  ucodes               Ucode[]
  roles                Role[]
  role_users           RoleUser[]
  payment_transactions PaymentTransaction[]
  subscriptions        Subscription[]
  workspace_users      WorkspaceUser[]

  @@map("users")
}

model Ucode {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1) @db.SmallInt

  user_id    String?
  token      String?
  email      String?
  expired_at DateTime?
  user       User?     @relation(fields: [user_id], references: [id])

  @@map("ucodes")
}

model Role {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status Int?    @default(1) @db.SmallInt
  title  String?
  name   String?

  tenant_id String?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  user_id String?
  user    User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]     @relation("PermissionToRole")

  workspace_id String?
  workspaces   Workspace? @relation(fields: [workspace_id], references: [id])

  @@map("roles")
}

model Permission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status           Int?             @default(1) @db.SmallInt
  title            String?
  action           String?
  subject          String?
  conditions       String?
  fields           String?
  permission_roles PermissionRole[]
  roles            Role[]           @relation("PermissionToRole")

  @@map("permissions")
}

model PermissionRole {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id String
  role_id       String
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

model RoleUser {
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id String
  user_id String
  role    Role   @relation(fields: [role_id], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

model NotificationEvent {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status        Int?           @default(1) @db.SmallInt
  type          String?
  text          String?
  notifications Notification[]

  @@map("notification_events")
}

model Notification {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status                Int?               @default(1) @db.SmallInt
  sender_id             String?
  receiver_id           String?
  notification_event_id String?
  entity_id             String?
  read_at               DateTime?
  notification_event    NotificationEvent? @relation(fields: [notification_event_id], references: [id])
  receiver              User?              @relation("receiver", fields: [receiver_id], references: [id])
  sender                User?              @relation("sender", fields: [sender_id], references: [id])

  @@map("notifications")
}

model UserPaymentMethod {
  id                String    @id @default(cuid())
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now())
  deleted_at        DateTime?
  user_id           String?
  payment_method_id String?
  checkout_id       String?
  user              User?     @relation(fields: [user_id], references: [id])

  @@map("user_payment_methods")
}

model PaymentTransaction {
  id               String    @id @default(cuid())
  created_at       DateTime  @default(now())
  updated_at       DateTime  @default(now())
  deleted_at       DateTime?
  store_id         String?
  user_id          String?
  order_id         String?
  type             String?   @default("order")
  withdraw_via     String?   @default("wallet")
  provider         String?
  reference_number String?
  status           String?   @default("pending")
  raw_status       String?
  amount           Decimal?
  currency         String?
  paid_amount      Decimal?
  paid_currency    String?
  user             User?     @relation(fields: [user_id], references: [id])

  @@map("payment_transactions")
}

model Message {
  id              String         @id @default(cuid())
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())
  deleted_at      DateTime?
  status          MessageStatus? @default(PENDING)
  sender_id       String?
  receiver_id     String?
  conversation_id String?
  attachment_id   String?
  message         String?
  attachment      Attachment?    @relation(fields: [attachment_id], references: [id])
  conversation    Conversation?  @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  receiver        User?          @relation("receiver", fields: [receiver_id], references: [id])
  sender          User?          @relation("sender", fields: [sender_id], references: [id])

  @@map("messages")
}

model Attachment {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  name       String?
  type       String?
  size       Int?
  file       String?
  file_alt   String?
  messages   Message[]

  @@map("attachments")
}

model Conversation {
  id             String    @id @default(cuid())
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())
  deleted_at     DateTime?
  creator_id     String?
  participant_id String?
  creator        User?     @relation("creator", fields: [creator_id], references: [id])
  participant    User?     @relation("participant", fields: [participant_id], references: [id])
  messages       Message[]

  @@map("conversations")
}

model Faq {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  question   String?
  answer     String?

  @@map("faqs")
}

model Contact {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  first_name   String?
  last_name    String?
  email        String?
  phone_number String?
  message      String?

  @@map("contacts")
}

model SocialMedia {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  status     Int?    @default(1) @db.SmallInt
  sort_order Int?    @default(0)
  name       String?
  url        String?
  icon       String?

  @@map("social_medias")
}

model WebsiteInfo {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  name                String?
  phone_number        String?
  email               String?
  address             String?
  logo                String?
  favicon             String?
  copyright           String?
  cancellation_policy String?

  @@map("website_infos")
}

model Setting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  category      String?
  label         String?
  description   String?
  key           String?       @unique
  default_value String?
  user_settings UserSetting[]

  @@map("settings")
}

model UserSetting {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  user_id    String?
  setting_id String?
  value      String?
  setting    Setting? @relation(fields: [setting_id], references: [id])
  user       User?    @relation(fields: [user_id], references: [id])

  @@map("user_settings")
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
}

// subscription model
// list of plans
model Plan {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  name            String
  // stripe product price id
  plan_price_id   String?
  price_per_month Decimal

  subscriptions Subscription[]

  @@map("plans")
}

// user subscription
model Subscription {
  id         String   @id @default(cuid())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  tenant_id String
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  plan_id String
  plan    Plan?  @relation(fields: [plan_id], references: [id], onDelete: Cascade)

  start_at DateTime
  end_at   DateTime

  payment_method String?

  user    User?   @relation(fields: [user_id], references: [id])
  user_id String?

  @@map("subscriptions")
}

// end of subscription model

// this table stores form
model Form {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  name        String?
  description String? @db.Text

  elements    Element[]
  submissions Submission[]

  tenant_id String?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  workspace_id String?
  workspaces   Workspace? @relation(fields: [workspace_id], references: [id])

  workspace_forms WorkspaceForm[]

  @@map("forms")
}

// this table stores form element
model Element {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  form_id String
  form    Form?  @relation(fields: [form_id], references: [id], onDelete: Cascade)

  type             String?
  // label       String?
  // placeholder String?
  // required    Boolean? @default(false)
  // options     Json?
  extra_attributes Json?

  @@map("elements")
}

// this table stores form
model Submission {
  id         String    @id @default(cuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1) @db.SmallInt

  form_id String
  form    Form?  @relation(fields: [form_id], references: [id], onDelete: Cascade)

  data Json?

  @@map("submissions")
}

// this table stores example
// model Note {
//   id                String  @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1) @db.SmallInt

//   title String?
//   body  String? @db.Text

//   tenant_id Int?
//   tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
//   @@map("posts")
// }

// Forms
// model Form {
//   id         String   @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1)

//   title               String?
//   slug                String?   @unique
//   properties          String?   @db.Text
//   notifies            Int?      @default(0) // 0 = false, 1 = true
//   description         String?   @db.Text
//   submit_button_text  String?   @default("Submit")
//   re_fillable         Int?      @default(0) // 0 = false, 1 = true
//   re_fill_button_text String?   @default("Fill Again")
//   color               String?   @default("#3B82F6")
//   submitted_text      String?   @default("Thank you for submitting the form.")
//   expires_at          DateTime?
//   expiration_text     String?   @default("This form has expired.")
//   is_public           Int?      @default(0) // 0 = false, 1 = true

//   editable_submissions             Int?    @default(0) // 0 = false, 1 = true
//   editable_submissions_button_text String? @default("Edit submission")

//   max_submissions_count        Int?
//   max_submissions_reached_text String? @default("This form has reached its maximum number of submissions.")

//   notification_subject String? @default("We saved your answers")
//   notification_body    String? @default("This is a confirmation that your submission was successfully saved.")
//   password             String?

//   user_id Int?
//   user    User? @relation(fields: [user_id], references: [id])

//   workspace_id   Int
//   workspace      Workspace?       @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
//   FormSubmission FormSubmission[]
//   FormView       FormView[]
//   FormStatistics FormStatistics[]

//   @@map("forms")
// }

// model FormSubmission {
//   id         String   @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1)

//   data String? @db.Text

//   form_id Int
//   form    Form? @relation(fields: [form_id], references: [id], onDelete: Cascade)

//   @@map("form_submissions")
// }

// model FormView {
//   id         String   @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1)

//   data String? @db.Text

//   form_id Int
//   form    Form? @relation(fields: [form_id], references: [id], onDelete: Cascade)

//   @@map("form_views")
// }

// model FormStatistics {
//   id         String   @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1)

//   data String? @db.Text

//   form_id Int
//   form    Form? @relation(fields: [form_id], references: [id], onDelete: Cascade)

//   @@map("form_statistics")
// }

// model FormTemplate {
//   id         String   @id @default(cuid())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1)

//   title       String?
//   slug        String? @unique
//   description String? @db.Text
//   structure   String? @db.Text
//   questions   String? @db.Text

//   user_id Int?
//   User    User? @relation(fields: [user_id], references: [id])

//   workspace_id Int
//   workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

//   @@map("form_template")
// }
