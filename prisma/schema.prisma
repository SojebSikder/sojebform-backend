// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  name         String?
  phone_number String?
  website      String?

  // trial information
  trial_end_at DateTime?

  users              User[]
  roles              Role[]
  Workspace          Workspace[]
  WorkspaceUser      WorkspaceUser[]
  Subscription       Subscription[]
  PaymentTransaction PaymentTransaction[]

  @@map("organizations")
}

// User table
model User {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  last_logged_in DateTime?

  email    String? @unique
  username String? @unique
  fname    String? @db.VarChar(255)
  lname    String? @db.VarChar(255)
  password String? @db.VarChar(255)
  avatar   String?

  // billing id. e.g. stripe customer id
  billing_id String?

  is_admin  Int?          @default(0) // 0 = false, 1 = true
  tenant    Organization? @relation(fields: [tenant_id], references: [id])
  tenant_id Int?

  ucodes             Ucode[]
  role_users         RoleUser[]
  workspace_users    WorkspaceUser[]
  subscriptions      Subscription[]
  PaymentTransaction PaymentTransaction[]
  FormTemplate       FormTemplate[]
  Form               Form[]

  @@map("users")
}

model Ucode {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  user_id Int?
  user    User? @relation(fields: [user_id], references: [id])

  token      String    @db.Text
  email      String
  expired_at DateTime?

  @@map("ucodes")
}

// Store list of Roles
model Role {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title String?
  name  String?

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  workspace_id Int?
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  permission_roles PermissionRole[]
  role_users       RoleUser[]
  permissions      Permission[]

  @@map("roles")
}

// Store List of permissions
model Permission {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title            String?
  action           String?
  subject          String?
  conditions       String?          @db.Text
  fields           String?          @db.Text
  permission_roles PermissionRole[]
  roles            Role[]

  @@map("permissions")
}

// permission and role relationship
model PermissionRole {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  permission_id Int
  permission    Permission? @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  role_id Int
  role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@id([permission_id, role_id])
  @@map("permission_roles")
}

// role and user relationship
model RoleUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  role_id Int
  role    Role? @relation(fields: [role_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([role_id, user_id])
  @@map("role_users")
}

// just for example
// model Note {
//   id         Int       @id @default(autoincrement())
//   created_at DateTime  @default(now())
//   updated_at DateTime  @default(now())
//   deleted_at DateTime?
//   status     Int?      @default(1)

//   title String?
//   body  String? @db.Text

//   tenant_id Int?
//   tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

//   @@map("notes")
// }
// ------------------ workspace ---------------
// workspace
model Workspace {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  // workspace name
  name     String
  timezone String?

  tenant_id Int?
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  workspace_users WorkspaceUser[]

  roles        Role[]
  Form         Form[]
  FormTemplate FormTemplate[]

  @@map("workspaces")
}

// workspace and user relationship
// store workspace team member
model WorkspaceUser {
  // id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  user_id Int
  user    User? @relation(fields: [user_id], references: [id], onDelete: Cascade)

  tenant_id Int
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@id([workspace_id, user_id])
  @@map("workspace_users")
}

// subscription model
// list of plans
model Plan {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)
  sort_order Int?     @default(0)

  name             String
  // stripe product price id
  gateway_price_id String?
  price_per_month  Decimal

  // Number of user or employee,
  // that can added on platform
  user_limit Int?

  subscriptions Subscription[]

  @@map("plans")
}

// user subscription
model Subscription {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  status     Int?     @default(1)

  // stripe subscription id
  gateway_subscription_id String?

  tenant_id Int
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  plan_id Int
  plan    Plan? @relation(fields: [plan_id], references: [id], onDelete: Cascade)

  start_at DateTime
  end_at   DateTime

  payment_method String?
  user_id        Int?
  User           User?   @relation(fields: [user_id], references: [id])

  @@map("subscriptions")
}

// This table used to store organization
// subscription transactions
model PaymentTransaction {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // available values:
  // plan
  transaction_type     String?
  transaction_id       String?  @db.Text
  // e.g. stripe
  transaction_provider String?
  amount               Decimal?
  currency             String?

  user_id Int?
  user    User? @relation(fields: [user_id], references: [id])

  tenant_id Int
  tenant    Organization? @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

// Forms
model Form {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title               String?
  slug                String?   @unique
  properties          String?   @db.Text
  notifies            Int?      @default(0) // 0 = false, 1 = true
  description         String?   @db.Text
  submit_button_text  String?   @default("Submit")
  re_fillable         Int?      @default(0) // 0 = false, 1 = true
  re_fill_button_text String?   @default("Fill Again")
  color               String?   @default("#3B82F6")
  submitted_text      String?   @default("Thank you for submitting the form.")
  expires_at          DateTime?
  expiration_text     String?   @default("This form has expired.")
  is_public           Int?      @default(0) // 0 = false, 1 = true

  editable_submissions             Int?    @default(0) // 0 = false, 1 = true
  editable_submissions_button_text String? @default("Edit submission")

  max_submissions_count        Int?
  max_submissions_reached_text String? @default("This form has reached its maximum number of submissions.")

  notification_subject String? @default("We saved your answers")
  notification_body    String? @default("This is a confirmation that your submission was successfully saved.")
  password             String?

  user_id Int?
  user    User? @relation(fields: [user_id], references: [id])

  workspace_id   Int
  workspace      Workspace?       @relation(fields: [workspace_id], references: [id], onDelete: Cascade)
  FormSubmission FormSubmission[]
  FormView       FormView[]
  FormStatistics FormStatistics[]

  @@map("forms")
}

model FormSubmission {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  data String? @db.Text

  form_id Int
  form    Form? @relation(fields: [form_id], references: [id], onDelete: Cascade)

  @@map("form_submissions")
}

model FormView {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  data String? @db.Text

  form_id Int
  form    Form? @relation(fields: [form_id], references: [id], onDelete: Cascade)

  @@map("form_views")
}

model FormStatistics {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  data String? @db.Text

  form_id Int
  form    Form? @relation(fields: [form_id], references: [id], onDelete: Cascade)

  @@map("form_statistics")
}

model FormTemplate {
  id         Int       @id @default(autoincrement())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  status     Int?      @default(1)

  title       String?
  slug        String? @unique
  description String? @db.Text
  structure   String? @db.Text
  questions   String? @db.Text

  user_id Int?
  User    User? @relation(fields: [user_id], references: [id])

  workspace_id Int
  workspace    Workspace? @relation(fields: [workspace_id], references: [id], onDelete: Cascade)

  @@map("form_template")
}
